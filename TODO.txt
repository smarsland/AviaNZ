
# TODO for AviaNZ

Make a new method (not inside Segmentation):
    (1) Perform segmentation using at least one of old wavelet method and any other segmenter, possibly multiple options
    (2) Combine the segments as appropriate
    (3) Perform classification on each segment using at least one of wavelet energies, Raven feature, MFCC

    For kiwi, separate classification of M and F but combined in the return


Look up Freebird to see what data is needed in the info screen
    Reviewer and Something!

Control marking the same segments again and again - multiple clicks on Find matches with the same pattern.
	# Thing to do is probably move find matches into the segmentations



NP: So we need to save the 3 (male, female kiwi, ruru) learners
NP: And then add code to use it
# Done, but ML is extremely slow and no good results! There is a gap between the dataset and real thing which needs
    more research. A partial solution to increase speed would be just pass only the positive wavelet segments to ML
    rather than the whole file.
    However I decided to use Wavelets and make available all other alternative segmentation methods for this first release.

Test out having if both learner and OR say yes -> sure, if xor(learner,OR) -> maybe? (or something...)
For this version, that's it
    -> extensions (add other features and learners) MFCC, Raven, etc.
    -> combine with previous second data
    -> etc.

SM: Add in the 'who the user is' annotation
    # Done, but currently has a False in it's call to stop it
    # Need to know what info they want
    # And ask on every file?
    # And show on screen?
    
SM: Update the manual
    -> correct the cheat sheet
    -> get them included in the program (via web interface or pdf)
   # pdf is there and working in Windows
    
NP: Bring the outputs to a nice format
    (1) excel summary for the directory processed <DirName>_<spp>_<method>
    (2) AviaNZ annotation (this is going to be the last method if the user had several runs with different methods)
    (3) binary output (just for us to evaluate the results)    
    
NP: Stop saving temp files used to playback? however in Windows it goes to the local temp (garbage collection)

NP: Installation!!!
# Done, some tiding up is needed

(1) Minor bugs and extensions


    SM: Tidy code, ensure comments, etc.

    SM: Tidy the repository

    SM: Get the time from the file name (if standard) and use it to put day or night birds first

    NP: Read mp3 files
# SM: pysox


    NP: Make it possible to change parameters (look into pyqtgraph ParameterTree)

    ??: What to do with stereo sound? How about consistent sample rates?

	Interface --> Change spectrogram parameters --> add visible frequency range e.g. from:0 to:8000

	Update the status bar when auto saving the annotation? Users want to know/confirm.

    Readonly mode

    NP: Make play sounds play the denoised version after denoising
# This seems to be complicated with undo etc. Still thinking whats the best way to do it,
  can easily add a separate button to play denoised but not nice. I fixed the plotting problem though.

    NP: Add a change directory option
# Don't want to change what's drawn there (currently selected file and its spectro), but effects thereafter
  when opening a new file

	NP: Stop loading the file when choose to cancel the progress bar
# Removed the cancel button for now. otherwise have to unroll what happened inside the loadFile when the user cancel it.

	File list dock becomes frozen - one was experiencing this. Had to restart the program.
	    # Can we reproduce it?
	
(2) Memory management
    NP: It's a pain, but needs thinking about and then doing
    Could just split the file into shorter pieces? 
    Split files into 5 minute segments or whatever or look into paging

(3) Denoising, Wavelets and Segmentation
    Make denoising work
        Is there something wrong? No
        *** How long should a denoise piece be? Depends
	(1) Compare with matlab for long files: Almost identical results
	(2) *** Compare with making wavelet trees on shorter pieces
	(3) *** Denoise the segments separately


    NP: Fully integrate wavelet seg into program
    NP: We actually want Kiwi (M) and Kiwi (F), and need to get all the ruru calls
    NP: Want to have some form of machine learning
		(1) decision tree
		(2) MLP
		(3) SVM
		(4) boosting
    SM: And need to think about the 95% confidence thing a lot more
    SM: Add in the Check Segments 2 bit for this, and actually process the results!

    SM: Make the segmentations work fully
        Get the minimum time of a segment parameter sorted
        Work out how to combine the methods, particularly, spot overlaps in segments and combine them
        Work out parameters and how to set them
        Remove cross-correlation? Or just improve?

    Both: Think about nice ways to train a new wavelet filter
		And get the whole workflow sorted for it

    Use intensity of colour to encode certainty?

(4) Features
    Use the wavelets
    Finish the Raven features
    Add MFCC (nearly done)
    And whatever else seems interesting

    More on fundamental frequency
        smoothing?
        harvest or bana (yaapt was awful)
    Shape metrics

(5) Learning
    Standard methods
        MLP
        Decision tree
        Boosting
        SVM
    LSTM or GRU

    HMM to string syllables together

(6) Other
    Think more about the spectrogram inversion
        If it works --> Stu's bats
        Denoise the spectrogram fully (median filter, smoothing, consider grab-cut)

    Any necessary database or metadata things?

    Bats do keep on coming up...

    Generative noise model
